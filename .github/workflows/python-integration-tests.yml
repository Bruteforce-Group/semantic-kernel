#
# This workflow will run all python integrations tests.
#

name: Python Integration Tests

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths:
      - "python/**"
  merge_group:
    branches: ["main"]
    paths:
      - "python/**"
  schedule:
    - cron: "0 */12 * * *" # Run every 12 hours: midnight UTC and noon UTC

permissions:
  contents: read

jobs:
  python-merge-gate:
    if: ${{ github.event_name == 'merge_group' }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        os: [windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies with hnswlib native disabled
        if: matrix.os == 'macos-latest' && matrix.python-version == '3.11'
        run: |
          export HNSWLIB_NO_NATIVE=1
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry pytest
          cd python && poetry install
      - name: Install dependencies with hnswlib native enabled
        if: matrix.os != 'macos-latest' || matrix.python-version != '3.11'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry pytest
          cd python
          poetry install --without azure_cognitive_search --without weaviate --without pinecone --without postgres
      - name: Run Integration Tests
        id: run_tests
        shell: bash
        env: # Set Azure credentials secret as an input
          HNSWLIB_NO_NATIVE: 1
          Python_Integration_Tests: Python_Integration_Tests
          AzureOpenAI__Label: azure-text-davinci-003
          AzureOpenAIEmbedding__Label: azure-text-embedding-ada-002
          AzureOpenAI__DeploymentName: ${{ vars.AZUREOPENAI__DEPLOYMENTNAME }}
          AzureOpenAIChat__DeploymentName: ${{ vars.AZUREOPENAI__CHAT__DEPLOYMENTNAME }}
          AzureOpenAIEmbeddings__DeploymentName: ${{ vars.AZUREOPENAIEMBEDDING__DEPLOYMENTNAME }}
          AzureOpenAI__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAIEmbeddings__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAI__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          AzureOpenAIEmbeddings__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          Bing__ApiKey: ${{ secrets.BING__APIKEY }}
          OpenAI__ApiKey: ${{ secrets.OPENAI__APIKEY }}
          Pinecone__ApiKey: ${{ secrets.PINECONE__APIKEY }}
          Pinecone__Environment: ${{ secrets.PINECONE__ENVIRONMENT }}
          Postgres__Connectionstr: ${{secrets.POSTGRES__CONNECTIONSTR}}
          AZURE_COGNITIVE_SEARCH_ADMIN_KEY: ${{secrets.AZURE_COGNITIVE_SEARCH_ADMIN_KEY}}
          AZURE_COGNITIVE_SEARCH_ENDPOINT: ${{secrets.AZURE_COGNITIVE_SEARCH_ENDPOINT}}
        run: |
          cd python
          poetry run pytest ./tests/integration/completions/test_azure_oai_chat_service.py -v
          poetry run pytest ./tests/integration/completions/test_oai_chat_service.py -v
          poetry run pytest ./tests/integration/completions/test_hf_local_test_completions.py -v
          poetry run pytest ./tests/integration/connectors/memory/test_chroma.py -v
          poetry run pytest ./tests/integration/connectors/memory/test_qdrant_memory_store.py -v
          poetry run pytest ./tests/integration/planning -v
          poetry run pytest ./tests/integration/embeddings -v

  python-integration-tests:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        # python-version: ["3.8", "3.9", "3.10", "3.11"]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8"]
        os: [ubuntu-latest, windows-latest]
    outputs:
      test_results: ${{ steps.run_tests.outputs.test_results }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies with hnswlib native disabled
        if: matrix.os == 'macos-latest' && matrix.python-version == '3.11'
        run: |
          export HNSWLIB_NO_NATIVE=1
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry pytest
          cd python && poetry install
      - name: Install dependencies with hnswlib native enabled
        if: matrix.os != 'macos-latest' || matrix.python-version != '3.11'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry pytest
          cd python && poetry install
      - name: Run Integration Tests (Unix)
        if: matrix.os != 'windows-latest'
        id: run_tests
        shell: bash
        env: # Set Azure credentials secret as an input
          HNSWLIB_NO_NATIVE: 1
          Python_Integration_Tests: Python_Integration_Tests
          AzureOpenAI__Label: azure-text-davinci-003
          AzureOpenAIEmbedding__Label: azure-text-embedding-ada-002
          AzureOpenAI__DeploymentName: ${{ vars.AZUREOPENAI__DEPLOYMENTNAME }}
          AzureOpenAIChat__DeploymentName: ${{ vars.AZUREOPENAI__CHAT__DEPLOYMENTNAME }}
          AzureOpenAIEmbeddings__DeploymentName: ${{ vars.AZUREOPENAIEMBEDDING__DEPLOYMENTNAME }}
          AzureOpenAI__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAIEmbeddings__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAI__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          AzureOpenAIEmbeddings__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          Bing__ApiKey: ${{ secrets.BING__APIKEY }}
          OpenAI__ApiKey: ${{ secrets.OPENAI__APIKEY }}
          Pinecone__ApiKey: ${{ secrets.PINECONE__APIKEY }}
          Pinecone__Environment: ${{ secrets.PINECONE__ENVIRONMENT }}
          Postgres__Connectionstr: ${{secrets.POSTGRES__CONNECTIONSTR}}
          AZURE_COGNITIVE_SEARCH_ADMIN_KEY: ${{secrets.AZURE_COGNITIVE_SEARCH_ADMIN_KEY}}
          AZURE_COGNITIVE_SEARCH_ENDPOINT: ${{secrets.AZURE_COGNITIVE_SEARCH_ENDPOINT}}
        run: |
          cd python
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "============================================================<<$EOF" >> $GITHUB_OUTPUT
          echo "Integration Test Results for ${{ matrix.os }} ${{ matrix.python-version }}" >> $GITHUB_OUTPUT
          echo "============================================================" >> $GITHUB_OUTPUT
          poetry run pytest ./tests/integration -v >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          echo $GITHUB_OUTPUT
      - name: Run Integration Tests (Windows)
        if: matrix.os == 'windows-latest'
        id: run_tests
        shell: pwsh
        env: # Set Azure credentials secret as an input
          HNSWLIB_NO_NATIVE: 1
          Python_Integration_Tests: Python_Integration_Tests
          AzureOpenAI__Label: azure-text-davinci-003
          AzureOpenAIEmbedding__Label: azure-text-embedding-ada-002
          AzureOpenAI__DeploymentName: ${{ vars.AZUREOPENAI__DEPLOYMENTNAME }}
          AzureOpenAIChat__DeploymentName: ${{ vars.AZUREOPENAI__CHAT__DEPLOYMENTNAME }}
          AzureOpenAIEmbeddings__DeploymentName: ${{ vars.AZUREOPENAIEMBEDDING__DEPLOYMENTNAME }}
          AzureOpenAI__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAIEmbeddings__Endpoint: ${{ secrets.AZUREOPENAI__ENDPOINT }}
          AzureOpenAI__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          AzureOpenAIEmbeddings__ApiKey: ${{ secrets.AZUREOPENAI__APIKEY }}
          Bing__ApiKey: ${{ secrets.BING__APIKEY }}
          OpenAI__ApiKey: ${{ secrets.OPENAI__APIKEY }}
          Pinecone__ApiKey: ${{ secrets.PINECONE__APIKEY }}
          Pinecone__Environment: ${{ secrets.PINECONE__ENVIRONMENT }}
          Postgres__Connectionstr: ${{secrets.POSTGRES__CONNECTIONSTR}}
          AZURE_COGNITIVE_SEARCH_ADMIN_KEY: ${{secrets.AZURE_COGNITIVE_SEARCH_ADMIN_KEY}}
          AZURE_COGNITIVE_SEARCH_ENDPOINT: ${{secrets.AZURE_COGNITIVE_SEARCH_ENDPOINT}}
        run: |
          cd python
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "============================================================<<$EOF" >> $ENV:GITHUB_OUTPUT
          echo "Integration Test Results for ${{ matrix.os }} ${{ matrix.python-version }}" >> $ENV:GITHUB_OUTPUT
          echo "============================================================" >> $ENV:GITHUB_OUTPUT
          poetry run pytest ./tests/integration -v >> $ENV:GITHUB_OUTPUT
          echo "$EOF" >> $ENV:GITHUB_OUTPUT
          echo $ENV:GITHUB_OUTPUT

  notify_teams:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    name: Push Results to Microsoft Teams
    runs-on: ubuntu-latest
    needs: python-integration-tests
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          raw: ${{ needs.python-integration-tests.outputs.test_results }}
          dry_run: True
